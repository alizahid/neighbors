datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions", "fullTextSearch"]
}

enum BuildingType {
  apartment
  community
}

model Building {
  id String @id

  name String
  area String
  city String
  type BuildingType

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  notifications Notification[]
  posts         Post[]
  residents     Resident[]
}

model User {
  id String @id @db.Uuid

  email String  @unique
  name  String
  image String?
  meta  Json    @default("{}")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  channels      Member[]
  comments      Comment[]
  likes         Like[]
  messages      Message[]
  notifications Notification[]
  posts         Post[]
  residencies   Resident[]
}

model Notification {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  building   Building @relation(fields: [buildingId], references: [id])
  buildingId String

  actor  String @db.Uuid
  type   String
  target String

  readAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

enum ResidentRole {
  resident
}

model Resident {
  id String @id @default(cuid())

  building   Building @relation(fields: [buildingId], references: [id])
  buildingId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  floor     String?
  apartment String?

  role ResidentRole @default(resident)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum PostType {
  ad
  post
  item
  event
}

model Post {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  building   Building @relation(fields: [buildingId], references: [id])
  buildingId String

  body String
  type PostType
  meta Json     @default("{}")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  comments Comment[]
  likes    Like[]
}

model Comment {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  body String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Like {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Channel {
  id String @id @default(cuid())

  message String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  members  Member[]
  messages Message[]
}

model Member {
  id String @id @default(cuid())

  channel   Channel @relation(fields: [channelId], references: [id])
  channelId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  checkedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model Message {
  id String @id @default(cuid())

  channel   Channel @relation(fields: [channelId], references: [id])
  channelId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  body String
  meta Json   @default("{}")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
